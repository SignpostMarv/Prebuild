<?xml version="1.0" encoding="utf-8" ?>
<Autotools>
	<ProjectAutogenSh>
		<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
				xmlns:dnpb="http://dnpb.sourceforge.net/schemas/prebuild-1.7.xsd"
				exclude-result-prefixes="dnpb"
				>
	<xsl:template match="/"><xsl:text disable-output-escaping="yes">#!/bin/sh
# Run this to generate all the initial makefiles, etc.
# Ripped off from Mono, which ripped off from GNOME macros version

DIE=0

srcdir=`dirname $0`
test -z "$srcdir" &amp;&amp; srcdir=.

if [ -n "$MONO_PATH" ]; then
	# from -> /mono/lib:/another/mono/lib
	# to -> /mono /another/mono
	for i in `echo ${MONO_PATH} | tr ":" " "`; do
		i=`dirname ${i}`
		if [ -n "{i}" -a -d "${i}/share/aclocal" ]; then
			ACLOCAL_FLAGS="-I ${i}/share/aclocal $ACLOCAL_FLAGS"
		fi
		if [ -n "{i}" -a -d "${i}/bin" ]; then
			PATH="${i}/bin:$PATH"
		fi
	done
	export PATH
fi

(autoconf --version) &lt; /dev/null > /dev/null 2>&amp;1 || {
  echo
  echo "**Error**: You must have \`autoconf' installed to compile Mono."
  echo "Download the appropriate package for your distribution,"
  echo "or get the source tarball at ftp://ftp.gnu.org/pub/gnu/"
  DIE=1
}

if [ -z "$LIBTOOL" ]; then
  LIBTOOL=`which glibtool 2>/dev/null` 
  if [ ! -x "$LIBTOOL" ]; then
    LIBTOOL=`which libtool`
  fi
fi

(grep "^AM_PROG_LIBTOOL" $srcdir/configure.ac >/dev/null) &amp;&amp; {
  ($LIBTOOL --version) &lt; /dev/null > /dev/null 2>&amp;1 || {
    echo
    echo "**Error**: You must have \`libtool' installed to compile Mono."
    echo "Get ftp://ftp.gnu.org/pub/gnu/libtool-1.2d.tar.gz"
    echo "(or a newer version if it is available)"
    DIE=1
  }
}

grep "^AM_GNU_GETTEXT" $srcdir/configure.ac >/dev/null &amp;&amp; {
  grep "sed.*POTFILES" $srcdir/configure.ac >/dev/null || \
  (gettext --version) &lt; /dev/null > /dev/null 2>&amp;1 || {
    echo
    echo "**Error**: You must have \`gettext' installed to compile Mono."
    echo "Get ftp://alpha.gnu.org/gnu/gettext-0.10.35.tar.gz"
    echo "(or a newer version if it is available)"
    DIE=1
  }
}

(automake --version) &lt; /dev/null > /dev/null 2>&amp;1 || {
  echo
  echo "**Error**: You must have \`automake' installed to compile Mono."
  echo "Get ftp://ftp.gnu.org/pub/gnu/automake-1.3.tar.gz"
  echo "(or a newer version if it is available)"
  DIE=1
  NO_AUTOMAKE=yes
}

# if no automake, don't bother testing for aclocal
test -n "$NO_AUTOMAKE" || (aclocal --version) &lt; /dev/null > /dev/null 2>&amp;1 || {
  echo
  echo "**Error**: Missing \`aclocal'.  The version of \`automake'"
  echo "installed doesn't appear recent enough."
  echo "Get ftp://ftp.gnu.org/pub/gnu/automake-1.3.tar.gz"
  echo "(or a newer version if it is available)"
  DIE=1
}

if test "$DIE" -eq 1; then
  exit 1
fi

if test -z "$NOCONFIGURE"; then

if test -z "$*"; then
  echo "**Warning**: I am going to run \`configure' with no arguments."
  echo "If you wish to pass any to it, please specify them on the"
  echo \`$0\'" command line."
  echo
fi

fi

case $CC in
xlc )
  am_opt=--include-deps;;
esac


if grep "^AM_PROG_LIBTOOL" configure.ac >/dev/null; then
  if test -z "$NO_LIBTOOLIZE" ; then 
    echo "Running libtoolize..."
    ${LIBTOOL}ize --force --copy
  fi
fi

echo "Running aclocal $ACLOCAL_FLAGS ..."
aclocal $ACLOCAL_FLAGS || {
  echo
  echo "**Error**: aclocal failed. This may mean that you have not"
  echo "installed all of the packages you need, or you may need to"
  echo "set ACLOCAL_FLAGS to include \"-I \$prefix/share/aclocal\""
  echo "for the prefix where you installed the packages whose"
  echo "macros were not found"
  exit 1
}

if grep "^AM_CONFIG_HEADER" configure.ac >/dev/null; then
  echo "Running autoheader..."
  autoheader || { echo "**Error**: autoheader failed."; exit 1; }
fi

echo "Running automake --gnu $am_opt ..."
automake --add-missing --gnu $am_opt ||
  { echo "**Error**: automake failed."; exit 1; }
echo "Running autoconf ..."
autoconf || { echo "**Error**: autoconf failed."; exit 1; }

conf_flags="--enable-maintainer-mode --enable-compile-warnings" #--enable-iso-c

if test x$NOCONFIGURE = x; then
  echo Running $srcdir/configure $conf_flags "$@" ...
  $srcdir/configure $conf_flags "$@" \
  &amp;&amp; echo Now type \`make\' to compile $PKG_NAME || exit 1
else
  echo Skipping configure process.
fi
</xsl:text>
	</xsl:template>
	</xsl:stylesheet>
	</ProjectAutogenSh>

	<ProjectConfigureAc>
	<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
				xmlns:dnpb="http://dnpb.sourceforge.net/schemas/prebuild-1.7.xsd"
				exclude-result-prefixes="dnpb"
				>
	<xsl:param name="projectName" />
	<xsl:template match="/">
<xsl:value-of select="$projectName"/>

<xsl:for-each select="//Project[@name=$projectName]">

AC_INIT(ChangeLog)
AC_PREREQ(2.53)
AC_CANONICAL_SYSTEM
PROJECT_NAME=<xsl:value-of select="@name" />
PROJECT_VERSION=<xsl:value-of select="@version" />
PROJECT_DESCRIPTION="<xsl:value-of select="Description/text()" />"
PROJECT_TYPE="<xsl:value-of select="@type" />"

AC_SUBST(PROJECT_NAME)
AC_SUBST(PROJECT_VERSION)
case $PROJECT_TYPE in
	*Exe)
		ASSEMBLY_EXTENSION=exe
		;;
	*Library)
		ASSEMBLY_EXTENSION=dll
		PKGCONFIG_FILE=$PROJECT_NAME.pc
		;;
	*)
		AC_MSG_WARN([*** Please add support for project type $PROJECT_TYPE to configure.ac checks!])
		;;
esac
AC_SUBST(ASSEMBLY_EXTENSION)

AM_INIT_AUTOMAKE([$PROJECT_NAME],[$PROJECT_VERSION],[$PROJECT_DESCRIPTION])

AC_OUTPUT([
Makefile
<xsl:if test="@type=Library"><xsl:value-of select="@name" />.pc</xsl:if>
])
</xsl:for-each>	

	</xsl:template>
</xsl:stylesheet>
	</ProjectConfigureAc>

	<ProjectMakefileAm>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
				xmlns:dnpb="http://dnpb.sourceforge.net/schemas/prebuild-1.7.xsd"
				exclude-result-prefixes="dnpb"
				>
<xsl:template match="/">
ASSEMBLY=$(PROJECT_NAME).$(ASSEMBLY_EXTENSION)



all:
	echo $(ASSEMBLY)

</xsl:template>
</xsl:stylesheet>
	</ProjectMakefileAm>
	
	<ProjectPcIn>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
				xmlns:dnpb="http://dnpb.sourceforge.net/schemas/prebuild-1.7.xsd"
				exclude-result-prefixes="dnpb"
				>
	<xsl:param name="projectName" />
	<xsl:template match="/">
<xsl:value-of select="$projectName"/>

<xsl:for-each select="//Project[@name=$projectName]">
prefix=@prefix@
exec_prefix=${prefix}
libdir=${exec_prefix}/lib/mono/@PROJECT_NAME@

Name: <xsl:value-of select="@name" />
Description: <xsl:value-of select="Description/text()" />
Version: @PROJECT_VERSION@
Requires:<xsl:for-each select="Reference"><xsl:if test="@localCopy=false"><xsl:text disable-output-escaping="yes"> </xsl:text><xsl:value-of select="@name" /></xsl:if></xsl:for-each>
Libs: -r:${libdir}/@PROJECT_NAME@.dll

</xsl:for-each>	

	</xsl:template>
</xsl:stylesheet>
	</ProjectPcIn>
	
	<SolutionAutogenSh>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
				xmlns:dnpb="http://dnpb.sourceforge.net/schemas/prebuild-1.7.xsd"
				exclude-result-prefixes="dnpb"
				>
	<xsl:template match="/"><xsl:text disable-output-escaping="yes">#!/bin/sh
# Run this to generate all the initial makefiles, etc.
# Ripped off from Mono, which ripped off from GNOME macros version

DIE=0

srcdir=`dirname $0`
test -z "$srcdir" &amp;&amp; srcdir=.

if [ -n "$MONO_PATH" ]; then
	# from -> /mono/lib:/another/mono/lib
	# to -> /mono /another/mono
	for i in `echo ${MONO_PATH} | tr ":" " "`; do
		i=`dirname ${i}`
		if [ -n "{i}" -a -d "${i}/share/aclocal" ]; then
			ACLOCAL_FLAGS="-I ${i}/share/aclocal $ACLOCAL_FLAGS"
		fi
		if [ -n "{i}" -a -d "${i}/bin" ]; then
			PATH="${i}/bin:$PATH"
		fi
	done
	export PATH
fi

(autoconf --version) &lt; /dev/null > /dev/null 2>&amp;1 || {
  echo
  echo "**Error**: You must have \`autoconf' installed to compile Mono."
  echo "Download the appropriate package for your distribution,"
  echo "or get the source tarball at ftp://ftp.gnu.org/pub/gnu/"
  DIE=1
}

if [ -z "$LIBTOOL" ]; then
  LIBTOOL=`which glibtool 2>/dev/null` 
  if [ ! -x "$LIBTOOL" ]; then
    LIBTOOL=`which libtool`
  fi
fi

(grep "^AM_PROG_LIBTOOL" $srcdir/configure.ac >/dev/null) &amp;&amp; {
  ($LIBTOOL --version) &lt; /dev/null > /dev/null 2>&amp;1 || {
    echo
    echo "**Error**: You must have \`libtool' installed to compile Mono."
    echo "Get ftp://ftp.gnu.org/pub/gnu/libtool-1.2d.tar.gz"
    echo "(or a newer version if it is available)"
    DIE=1
  }
}

grep "^AM_GNU_GETTEXT" $srcdir/configure.ac >/dev/null &amp;&amp; {
  grep "sed.*POTFILES" $srcdir/configure.ac >/dev/null || \
  (gettext --version) &lt; /dev/null > /dev/null 2>&amp;1 || {
    echo
    echo "**Error**: You must have \`gettext' installed to compile Mono."
    echo "Get ftp://alpha.gnu.org/gnu/gettext-0.10.35.tar.gz"
    echo "(or a newer version if it is available)"
    DIE=1
  }
}

(automake --version) &lt; /dev/null > /dev/null 2>&amp;1 || {
  echo
  echo "**Error**: You must have \`automake' installed to compile Mono."
  echo "Get ftp://ftp.gnu.org/pub/gnu/automake-1.3.tar.gz"
  echo "(or a newer version if it is available)"
  DIE=1
  NO_AUTOMAKE=yes
}


# if no automake, don't bother testing for aclocal
test -n "$NO_AUTOMAKE" || (aclocal --version) &lt; /dev/null > /dev/null 2>&amp;1 || {
  echo
  echo "**Error**: Missing \`aclocal'.  The version of \`automake'"
  echo "installed doesn't appear recent enough."
  echo "Get ftp://ftp.gnu.org/pub/gnu/automake-1.3.tar.gz"
  echo "(or a newer version if it is available)"
  DIE=1
}

if test "$DIE" -eq 1; then
  exit 1
fi

if test -z "$*"; then
  echo "**Warning**: I am going to run \`configure' with no arguments."
  echo "If you wish to pass any to it, please specify them on the"
  echo \`$0\'" command line."
  echo
fi

case $CC in
xlc )
  am_opt=--include-deps;;
esac


if grep "^AM_PROG_LIBTOOL" configure.ac >/dev/null; then
  if test -z "$NO_LIBTOOLIZE" ; then 
    echo "Running libtoolize..."
    ${LIBTOOL}ize --force --copy
  fi
fi

echo "Running aclocal $ACLOCAL_FLAGS ..."
aclocal $ACLOCAL_FLAGS || {
  echo
  echo "**Error**: aclocal failed. This may mean that you have not"
  echo "installed all of the packages you need, or you may need to"
  echo "set ACLOCAL_FLAGS to include \"-I \$prefix/share/aclocal\""
  echo "for the prefix where you installed the packages whose"
  echo "macros were not found"
  exit 1
}

if grep "^AM_CONFIG_HEADER" configure.ac >/dev/null; then
  echo "Running autoheader..."
  autoheader || { echo "**Error**: autoheader failed."; exit 1; }
fi

echo "Running automake --gnu $am_opt ..."
automake --add-missing --gnu $am_opt ||
  { echo "**Error**: automake failed."; exit 1; }
echo "Running autoconf ..."
autoconf || { echo "**Error**: autoconf failed."; exit 1; }
</xsl:text>
<xsl:for-each select="/Prebuild/Solution/Project">
echo Running <xsl:value-of select="@name" />/autogen.sh ...
(cd $srcdir/<xsl:value-of select="@name" /> ; NOCONFIGURE=1  /bin/sh ./autogen.sh "$@")
echo Done running <xsl:value-of select="@name" />/autogen.sh ...
</xsl:for-each>
<xsl:text disable-output-escaping="yes">
conf_flags="--enable-maintainer-mode --enable-compile-warnings" #--enable-iso-c

if test x$NOCONFIGURE = x; then
  echo Running $srcdir/configure $conf_flags "$@" ...
  $srcdir/configure $conf_flags "$@" \
  &amp;&amp; echo Now type \`make\' to compile $PKG_NAME || exit 1
else
  echo Skipping configure process.
fi
</xsl:text>
</xsl:template>
</xsl:stylesheet>	
	</SolutionAutogenSh>
	
	<SolutionConfigureAc>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
				xmlns:dnpb="http://dnpb.sourceforge.net/schemas/prebuild-1.7.xsd"
				exclude-result-prefixes="dnpb"
				xml:space="preserve"
				>
	<!-- Removes the xml version header in the generated file -->
	<xsl:output method="text"/>

	<xsl:template match="/">AC_INIT(ChangeLog)
AC_PREREQ(2.53)
AC_CANONICAL_SYSTEM
SOLUTION_NAME=<xsl:value-of select="/Prebuild/Solution/@name" />
SOLUTION_VERSION=<xsl:value-of select="/Prebuild/Solution/@version" />
SOLUTION_DESCRIPTION="<xsl:value-of select="/Prebuild/Solution/Description" />"
<xsl:text disable-output-escaping="yes">
AC_SUBST(DESCRIPTION)
AM_INIT_AUTOMAKE([$SOLUTION_NAME],[$SOLUTION_VERSION],[$SOLUTION_DESCRIPTION])

AM_MAINTAINER_MODE

dnl AC_PROG_INTLTOOL([0.25])

AC_PROG_INSTALL


AC_MSG_CHECKING([whether we're compiling from an RCS])
if test -f "$srcdir/.cvs_version" ; then
        from_rcs=cvs
else
  if test -f "$srcdir/.svn/entries" ; then
  		from_rcs=svn
  else
        from_rcs=no
  fi
fi

AC_MSG_RESULT($from_rcs)

AC_PATH_PROG(MONO, mono)
AC_PATH_PROG(GMCS, gmcs)
AC_PATH_PROG(GACUTIL, gacutil)

AC_MSG_CHECKING([for mono])
dnl if test "x$MONO" = "x" ; then
dnl  AC_MSG_ERROR([Can't find "mono" in your PATH])
dnl else
  AC_MSG_RESULT([found])
dnl fi

AC_MSG_CHECKING([for gmcs])
dnl if test "x$GMCS" = "x" ; then
dnl  AC_MSG_ERROR([Can't find "gmcs" in your PATH])
dnl else
  AC_MSG_RESULT([found])
dnl fi

AC_SUBST(PATH)
AC_SUBST(LD_LIBRARY_PATH)

dnl CSFLAGS="-debug -nowarn:1574"
CSFLAGS=""
AC_SUBST(CSFLAGS)

dnl Find pkg-config
AC_PATH_PROG(PKGCONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
        AC_MSG_ERROR([You need to install pkg-config])
fi

MONO_REQUIRED_VERSION=1.1

PKG_CHECK_MODULES(MONO_DEPENDENCY, mono >= $MONO_REQUIRED_VERSION, has_mono=true, has_mono=false)
BUILD_DIR="bin"
AC_SUBST(BUILD_DIR)
CONFIG="Release"
AC_SUBST(CONFIG)

if test "x$has_mono" = "xtrue"; then
  AC_PATH_PROG(RUNTIME, mono, no)
  AC_PATH_PROG(CSC, gmcs, no)
  if test `uname -s` = "Darwin"; then
        LIB_PREFIX=
        LIB_SUFFIX=.dylib
  else
        LIB_PREFIX=.so
        LIB_SUFFIX=
  fi
else
  AC_PATH_PROG(CSC, csc.exe, no)
  if test x$CSC = "xno"; then
        AC_MSG_ERROR([You need to install either mono or .Net])
  else
    RUNTIME=
    LIB_PREFIX=
    LIB_SUFFIX=
  fi
fi

AC_SUBST(LIB_PREFIX)
AC_SUBST(LIB_SUFFIX)
AC_SUBST(RUNTIME)
AC_SUBST(CSC)

AC_SUBST(BASE_DEPENDENCIES_CFLAGS)
AC_SUBST(BASE_DEPENDENCIES_LIBS)

dnl Find monodoc
MONODOC_REQUIRED_VERSION=1.0
AC_SUBST(MONODOC_REQUIRED_VERSION)
PKG_CHECK_MODULES(MONODOC_DEPENDENCY, monodoc >= $MONODOC_REQUIRED_VERSION, enable_monodoc=yes, enable_monodoc=no)

if test "x$enable_monodoc" = "xyes"; then
        AC_PATH_PROG(MONODOC, monodoc, no)
        if test x$MONODOC = xno; then
           enable_monodoc=no
        fi
else
        MONODOC=
fi

AC_SUBST(MONODOC)
AM_CONDITIONAL(ENABLE_MONODOC, test "x$enable_monodoc" = "xyes")

winbuild=no
case "$host" in
       *-*-mingw*|*-*-cygwin*)
               winbuild=yes
               ;;
esac
AM_CONDITIONAL(WINBUILD, test x$winbuild = xyes)
</xsl:text>
AC_CONFIG_SUBDIRS(<xsl:for-each select="/Prebuild/Solution/Project"><xsl:text disable-output-escaping="yes"> </xsl:text><xsl:value-of select="@name" />
</xsl:for-each>)
<xsl:text disable-output-escaping="yes">

AC_OUTPUT([
Makefile
])

echo "- - -"
echo "Configuration summary"
echo ""
echo "   * Installation prefix: $prefix"
echo "   * compiler:            $CSC"
echo "   * Documentation:       $enable_monodoc ($MONODOC)"
echo "   * Solution Name:       $SOLUTION_NAME"
echo "   * Packages:"</xsl:text>
<xsl:for-each select="/Prebuild/Solution/Project">echo "    - <xsl:value-of select="@name" />"
</xsl:for-each><xsl:text disable-output-escaping="yes">echo "   * Version:             $PACKAGE_VERSION"
echo ""
echo "- - -"
</xsl:text>
</xsl:template>
</xsl:stylesheet>
	</SolutionConfigureAc>
	
	<SolutionMakefileAm>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
				xmlns:dnpb="http://dnpb.sourceforge.net/schemas/prebuild-1.7.xsd"
				exclude-result-prefixes="dnpb"
				xml:space="preserve"
				>
	<xsl:template match="/">SUBDIRS =<xsl:for-each select="/Prebuild/Solution/Project"><xsl:text disable-output-escaping="yes"> </xsl:text><xsl:value-of select="@name" /></xsl:for-each>
</xsl:template>
</xsl:stylesheet>
	</SolutionMakefileAm>
</Autotools>